<% hide_message_form ||= false %>
<% messages ||= conversation.messages.oldest %>
<% heading ||= nil %>
<% heading ||= "Start a conversation about this below!" if messages.empty? %>
<% @message ||= conversation.messages.new unless hide_message_form %>
<% conversation.mark_read_for_membership(current_membership) %>

<%= render 'account/shared/box' do |p| %>
  <% p.content_for :title, heading || t('.header') %>
  <% p.content_for :raw_body do %>
    <div class="relative"
      data-controller="reply"
      data-action="click->reply#hideReplyButton"
      >
      <div class="absolute top-0 bottom-52 sm:bottom-40 left-0 right-0 flex items-end transition-opacity opacity-0 duration-300 z-10 hidden px-3" id="replyFocus" data-reply-target="focus"
        data-action="click->reply#cancel"
        >
        <%= turbo_frame_tag "focus-reply" %>
      </div>
      <%# TODO - we need to figure out how to enable updates when the conversation has not been persisted %>
      <%#= updates_for conversation, :messages do  %>
        <div id="messages_<%= conversation.id %>" class="flex flex-col p-3 overflow-y-auto scrollbar-thumb-blue scrollbar-thumb-rounded scrollbar-track-blue-lighter scrollbar-w-2 scrolling-touch relative py-6 px-8">
          <%= turbo_frame_tag "messages" do %>
            <div>
              <div class="">
                <% messages.each_with_index do |message, index| %>
                  <%= render 'account/shared/conversations/message', message: message, next_message: messages[index + 1] %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <%# end %>
      <div class="border-t-2 border-gray-200 mb-2 pt-4 pb-6 px-8 sm:mb-0">
        <% unless hide_message_form %>
          <div class="chat-controls">
            <%= form_with(model: conversation.persisted?  ? [:account, conversation, @message] : [:account, @team, conversation], remote: true, class: 'new-message-form', data: {controller: "form", action: "submit->form#stripTrix turbo:submit-end->form#resetOnSuccess turbo:submit-end->reply#cancel"}) do |form| %>

              <%= render 'shared/forms/errors', form: form %>
              <% if conversation.persisted? %>
                <%= render 'account/conversations/messages/field', form: form %>
              <% else %>
                <%= form.hidden_field :subject_id %>
                <%= form.hidden_field :subject_class %>

                <%= form.fields_for :messages do |message_form| %>
                  <%= render 'account/conversations/messages/field', form: message_form %>
                <% end %>
              <% end %>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>
<% end %>
